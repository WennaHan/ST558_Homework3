[
  {
    "objectID": "Homework3.html",
    "href": "Homework3.html",
    "title": "Homework3",
    "section": "",
    "text": "On the exam, you’ll be asked to explain some topics. How about some practice?! Create a markdown list with the following questions:\n\nIf your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\n\n../MyData.csv\n\n\nWhat are the major benefits of using R projects?\n\n\nR project could store all related files together for easy access and share. Each R project has its own working directory, which makes it easy to read and write files using relative paths. Also, R projects could keep the project related data, variables, and functions isolated from other projects. Switching between projects is easy and doesn’t risk contaminating the global environment.\n\n\nWhat is git and what is github?\n\n\nGit is a version control system that tracks changes in files over time, which could be used locally to manage versions. GitHub is a web-based hosting platform for Git repositories, which also provides collaboration features.\n\n\nWhat are the two main differences between a tibble and a data.frame?\n\n\nTibbles are data.frames that are lazy and surly: they do less and complain more, forcing us to confront problems earlier, typically leading to cleaner, more expressive code. The two main differences are:\n1) when we print a tibble, it will give only first few rows/columns, which will not clog up our output space.\n2) tibble will not coerce down to a vector when we subset to only one column using [, it will still return a tibble.\n\n\nRewrite the following nested function call using baseR’s chaining operator: arrange(filter(select(as_tibble(iris), starts_with(“Petal”), Species), Petal.Length &lt; 1.55), Species)\n\n\nlibrary(dplyr)\nas_tibble(iris) |&gt;\nselect(starts_with(“Petal”), Species) |&gt; filter(Petal.Length &lt; 1.55) |&gt;\narrange(Species)\n\n\nWhat is meant by long format data and wide format data? Which do we generally prefer for statistical analysis?\n\n\nThe long format means each row consists of one observation and each column one variable, while the wide format means more than one observation are in a given row. The long format is usually preferred for statistical analysis."
  },
  {
    "objectID": "Homework3.html#task-1-conceptual-questions",
    "href": "Homework3.html#task-1-conceptual-questions",
    "title": "Homework3",
    "section": "",
    "text": "On the exam, you’ll be asked to explain some topics. How about some practice?! Create a markdown list with the following questions:\n\nIf your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\n\n../MyData.csv\n\n\nWhat are the major benefits of using R projects?\n\n\nR project could store all related files together for easy access and share. Each R project has its own working directory, which makes it easy to read and write files using relative paths. Also, R projects could keep the project related data, variables, and functions isolated from other projects. Switching between projects is easy and doesn’t risk contaminating the global environment.\n\n\nWhat is git and what is github?\n\n\nGit is a version control system that tracks changes in files over time, which could be used locally to manage versions. GitHub is a web-based hosting platform for Git repositories, which also provides collaboration features.\n\n\nWhat are the two main differences between a tibble and a data.frame?\n\n\nTibbles are data.frames that are lazy and surly: they do less and complain more, forcing us to confront problems earlier, typically leading to cleaner, more expressive code. The two main differences are:\n1) when we print a tibble, it will give only first few rows/columns, which will not clog up our output space.\n2) tibble will not coerce down to a vector when we subset to only one column using [, it will still return a tibble.\n\n\nRewrite the following nested function call using baseR’s chaining operator: arrange(filter(select(as_tibble(iris), starts_with(“Petal”), Species), Petal.Length &lt; 1.55), Species)\n\n\nlibrary(dplyr)\nas_tibble(iris) |&gt;\nselect(starts_with(“Petal”), Species) |&gt; filter(Petal.Length &lt; 1.55) |&gt;\narrange(Species)\n\n\nWhat is meant by long format data and wide format data? Which do we generally prefer for statistical analysis?\n\n\nThe long format means each row consists of one observation and each column one variable, while the wide format means more than one observation are in a given row. The long format is usually preferred for statistical analysis."
  },
  {
    "objectID": "Homework3.html#task-2-reading-delimited-data",
    "href": "Homework3.html#task-2-reading-delimited-data",
    "title": "Homework3",
    "section": "Task 2 Reading Delimited Data",
    "text": "Task 2 Reading Delimited Data\nNote: Use chaining where possible!\nThe data sets we’ll use for this part comes from the UCI machine learning repository.\n\nGlass data\n1. Read this data into R directly from the URL using functions from the tidyverse. Notice that the data doesn’t include column names - add those (in a manner of your choosing). Print out the tibble (just call the object name).\n\nlibrary(readr)\n\nWarning: package 'readr' was built under R version 4.2.3\n\nglass_data &lt;- read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/glass.data\",\n                       col_names = c(\"Id\", \"RI\", \"Na\", \"Mg\", \"Al\", \"Si\", \"K\"\n                                     , \"Ca\", \"Ba\", \"Fe\", \"Type_of_glass\"))\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): Id, RI, Na, Mg, Al, Si, K, Ca, Ba, Fe, Type_of_glass\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglass_data\n\n# A tibble: 214 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0                1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0                1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0                1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0                1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0                1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26             1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0                1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0                1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0                1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11             1\n# ℹ 204 more rows\n\n\n2. Start a chain that would overwrite the Type_of_glass variable using mutate(). Create a character string version (that is, replace 1 with “building_windows_float_processed”, 2 with “building_win. . .”, etc.) instead (see the variable descriptions above to give meaningful values). (If you are familiar with factors, feel free to use that instead of a character string variable - otherwise, think if/then/else via ifelse().)\n\nlibrary(tidyverse)\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\n\nWarning: package 'tidyr' was built under R version 4.2.3\n\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ purrr     1.0.1\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nglass_data |&gt;\n  mutate(Type_of_glass = factor(Type_of_glass, levels = 1:7, labels = \n                                  c(\"building_windows_float_processed\",\n                                    \"building_windows_non_float_processed\",\n                                    \"vehicle_windows_float_processed\", \n                                    \"vehicle_windows_non_float_processed\",\n                                    \"containers\", \n                                    \"tableware\", \n                                    \"headlamps\")))\n\n# A tibble: 214 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass    \n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;            \n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0    building_windows…\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0    building_windows…\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0    building_windows…\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0    building_windows…\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0    building_windows…\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26 building_windows…\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0    building_windows…\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0    building_windows…\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0    building_windows…\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11 building_windows…\n# ℹ 204 more rows\n\n\n3. Continue your chain and keep only observations where the Fe variable is less than 0.2 and the Type of Glass is either “tableware” or “headlamp”.\n\nglass_data |&gt;\n  mutate(Type_of_glass = factor(Type_of_glass, levels = 1:7, labels = \n                                  c(\"building_windows_float_processed\",\n                                    \"building_windows_non_float_processed\",\n                                    \"vehicle_windows_float_processed\", \n                                    \"vehicle_windows_non_float_processed\",\n                                    \"containers\", \n                                    \"tableware\", \n                                    \"headlamps\"))) |&gt;\n  filter (Fe &lt; 0.2, Type_of_glass %in% c(\"tableware\", \"headlamps\"))\n\n# A tibble: 38 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;        \n 1   177  1.52  14    2.39  1.56  72.4  0     9.57  0        0 tableware    \n 2   178  1.52  13.8  2.41  1.19  72.8  0     9.77  0        0 tableware    \n 3   179  1.52  14.5  2.24  1.62  72.4  0     9.26  0        0 tableware    \n 4   180  1.52  14.1  2.19  1.66  72.7  0     9.32  0        0 tableware    \n 5   181  1.51  14.4  1.74  1.54  74.6  0     7.59  0        0 tableware    \n 6   182  1.52  15.0  0.78  1.74  72.5  0     9.95  0        0 tableware    \n 7   183  1.52  14.2  0     2.09  72.7  0    10.9   0        0 tableware    \n 8   184  1.52  14.6  0     0.56  73.5  0    11.2   0        0 tableware    \n 9   185  1.51  17.4  0     0.34  75.4  0     6.65  0        0 tableware    \n10   186  1.51  13.7  3.2   1.81  72.8  1.76  5.43  1.19     0 headlamps    \n# ℹ 28 more rows\n\n\n\n\nYeast data\n1. Read this data into R directly from the URL using functions from the tidyverse. Notice that the data doesn’t include column names - add those (in a manner of your choosing). Print out the tibble (just call the object name).\n\nyeast_data &lt;- read_table(\"https://www4.stat.ncsu.edu/~online/datasets/yeast.data\",\n                         col_names = c(\"seq_name\", \"mcg\", \"gvh\", \"alm\", \"mit\", \n                                       \"erl\", \"pox\", \"vac\", \"nuc\", \"class\"))\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  seq_name = col_character(),\n  mcg = col_double(),\n  gvh = col_double(),\n  alm = col_double(),\n  mit = col_double(),\n  erl = col_double(),\n  pox = col_double(),\n  vac = col_double(),\n  nuc = col_double(),\n  class = col_character()\n)\n\nyeast_data\n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\n\n2. Start a chain that removes the seq_name and nuc columns.\n\nyeast_data |&gt;\n  select(-seq_name, -nuc)\n\n# A tibble: 1,484 × 8\n     mcg   gvh   alm   mit   erl   pox   vac class\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT  \n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT  \n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT  \n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC  \n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT  \n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT  \n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT  \n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC  \n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT  \n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT  \n# ℹ 1,474 more rows\n\n\n3. Continue your chain to add columns corresponding to the mean and median of each numeric variable (mcg, gvh, alm, mit, erl, pox, and vac) at each class grouping (see the across() function as we did in the dplyr video!).\n\nyeast_data |&gt;\n  select(-seq_name, -nuc) |&gt;\n  group_by(class) |&gt;\n  mutate(across(where(is.numeric), list(mean = mean, median = median), .names = \"{.col}_{.fn}\"))\n\n# A tibble: 1,484 × 22\n# Groups:   class [10]\n     mcg   gvh   alm   mit   erl   pox   vac class mcg_mean mcg_median gvh_mean\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT      0.521       0.51    0.533\n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT      0.521       0.51    0.533\n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT      0.521       0.51    0.533\n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC      0.452       0.45    0.456\n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT      0.521       0.51    0.533\n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT      0.481       0.48    0.470\n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT      0.521       0.51    0.533\n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC      0.452       0.45    0.456\n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT      0.521       0.51    0.533\n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT      0.481       0.48    0.470\n# ℹ 1,474 more rows\n# ℹ 11 more variables: gvh_median &lt;dbl&gt;, alm_mean &lt;dbl&gt;, alm_median &lt;dbl&gt;,\n#   mit_mean &lt;dbl&gt;, mit_median &lt;dbl&gt;, erl_mean &lt;dbl&gt;, erl_median &lt;dbl&gt;,\n#   pox_mean &lt;dbl&gt;, pox_median &lt;dbl&gt;, vac_mean &lt;dbl&gt;, vac_median &lt;dbl&gt;"
  },
  {
    "objectID": "Homework3.html#task-2-combining-excel-and-delimited-data",
    "href": "Homework3.html#task-2-combining-excel-and-delimited-data",
    "title": "Homework3",
    "section": "Task 2: Combining Excel and Delimited Data",
    "text": "Task 2: Combining Excel and Delimited Data\n1. There is an excel version of the white wine data set available at https://www4.stat.ncsu.edu/~online/datasets/white-wine.xlsx.\n- Download this file\n- Place it in a folder you know (such as your working directory for your project)\n- Import the data from the first sheet using the readxl package\n- Print out the tibble (just call the object name)\n\nlibrary(readxl)\nwhite_wine_data &lt;- read_excel(\"white-wine.xlsx\",\n                              sheet = excel_sheets(\"white-wine.xlsx\")[1])\nwhite_wine_data\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\n2. When you print the data set out to the console, you may notice that some of the variable names are surrounded by backticks. This is because they are non-standard (they include a space in them). We can rename them in a number of ways. We’ll do it by reading in the variable names from the 2nd sheet of the same file.\n- Read in the data from the 2nd sheet. This should return a data frame with one column containing alternative versions of the variable names.\n- Grab that column and overwrite the current column names (colnames()) of your white wine tibble.\n\nvariable_names &lt;- read_excel(\"white-wine.xlsx\",\n                              sheet = excel_sheets(\"white-wine.xlsx\")[2])\ncolnames(white_wine_data) &lt;- as.character(variable_names$Variables)\nwhite_wine_data\n\n# A tibble: 4,898 × 12\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\n3. Lastly, add a column to this data set to indicate the wines are white. That is, add a column that has values of ‘white’ for every observation.\n\nwhite_wine_data &lt;- white_wine_data |&gt;\n  mutate(type = \"white\")\nwhite_wine_data\n\n# A tibble: 4,898 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n\n4. There is a semi-colon delimited version of the red wine data set available at https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv.\n- Read this in using the readr package. Be careful that the columns are read in as the correct type! - You should replace the variable names as done above.\n- You should append a column denoting the type as “red”.\n\nred_wine_data &lt;- read_csv2(\"https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv\",\n                           col_types = cols(.default = \"d\"))\n\nℹ Using \"','\" as decimal and \"'.'\" as grouping mark. Use `read_delim()` for more control.\n\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\ncolnames(red_wine_data) &lt;- as.character(variable_names$Variables)\nred_wine_data &lt;- red_wine_data |&gt;\n  mutate(type = \"red\")\nred_wine_data \n\n# A tibble: 1,599 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1            NA               NA           0             NA        NA\n 2            NA               NA           0             NA        NA\n 3            NA               NA          NA             NA        NA\n 4            NA               NA          NA             NA        NA\n 5            NA               NA           0             NA        NA\n 6            NA               NA           0             NA        NA\n 7            NA               NA          NA             NA        NA\n 8            NA               NA           0             NA        NA\n 9            NA               NA          NA              2        NA\n10            NA               NA          NA             NA        NA\n# ℹ 1,589 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n\n5. Combine these two data sets into one data set. They both have the exact same columns so this is an easy append task!\n- Use the dplyr::bind_rows() function (see the help) to create one tibble containing all of the wine data.\n\nwine_data &lt;- bind_rows(white_wine_data, red_wine_data)\nwine_data\n\n# A tibble: 6,497 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 6,487 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n\n6. Start a chain on your new combined data object to filter the data to only look at high-quality wines (quality &gt; 6.5) and wines that have a reasonable alcohol value (alcohol &lt; 132).\n\nwhite_wine_data |&gt; \n  filter(quality &gt; 6.5, alcohol &lt; 132)\n\n# A tibble: 989 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1            66             0.16        0.4             1.5     0.044\n 2            66             0.17        0.38            1.5     0.032\n 3            62             0.66        0.48            1.2     0.029\n 4            62             0.66        0.48            1.2     0.029\n 5            64             0.31        0.38            2.9     0.038\n 6            68             0.26        0.42            1.7     0.049\n 7            72             0.32        0.36            2       0.033\n 8            74             0.18        0.31            1.4     0.058\n 9            66             0.25        0.29            1.1     0.068\n10            62             0.16        0.33            1.1     0.057\n# ℹ 979 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n\n7. Continue your chain to now sort the data from highest quality to lowest.\n\nwhite_wine_data |&gt; \n  filter(quality &gt; 6.5, alcohol &lt; 132) |&gt;\n  arrange(desc(quality))\n\n# A tibble: 989 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1            91             0.27        0.45           10.6     0.035\n 2            66             0.36        0.29            1.6     0.021\n 3            74             0.24        0.36            2       0.031\n 4            69             0.36        0.34            4.2     0.018\n 5            71             0.26        0.49            2.2     0.032\n 6            62             0.66        0.48            1.2     0.029\n 7            62             0.66        0.48            1.2     0.029\n 8            68             0.26        0.42            1.7     0.049\n 9            67             0.23        0.31            2.1     0.046\n10            67             0.23        0.31            2.1     0.046\n# ℹ 979 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n\n8. Continue your chain to select only the variables that contain acid, the alcohol variable, the type variable, and the quality variable.\n\nwhite_wine_data |&gt; \n  filter(quality &gt; 6.5, alcohol &lt; 132) |&gt;\n  arrange(desc(quality)) |&gt;\n  select(contains(\"acid\"), alcohol, type, quality)\n\n# A tibble: 989 × 6\n   fixed_acidity volatile_acidity citric_acid alcohol type  quality\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;\n 1            91             0.27        0.45     104 white       9\n 2            66             0.36        0.29     124 white       9\n 3            74             0.24        0.36     125 white       9\n 4            69             0.36        0.34     127 white       9\n 5            71             0.26        0.49     129 white       9\n 6            62             0.66        0.48     128 white       8\n 7            62             0.66        0.48     128 white       8\n 8            68             0.26        0.42     105 white       8\n 9            67             0.23        0.31     107 white       8\n10            67             0.23        0.31     107 white       8\n# ℹ 979 more rows\n\n\n9. Continue your chain to add the mean and standard deviation of the alcohol variable to the data set for each setting of the quality variable.\n\nwhite_wine_data |&gt; \n  filter(quality &gt; 6.5, alcohol &lt; 132) |&gt;\n  arrange(desc(quality)) |&gt;\n  select(contains(\"acid\"), alcohol, type, quality) |&gt;\n  group_by(quality) |&gt;\n  mutate (alcohol_mean = mean(alcohol), \n          alcohol_sd = sd(alcohol))\n\n# A tibble: 989 × 8\n# Groups:   quality [3]\n   fixed_acidity volatile_acidity citric_acid alcohol type  quality alcohol_mean\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;        &lt;dbl&gt;\n 1            91             0.27        0.45     104 white       9         122.\n 2            66             0.36        0.29     124 white       9         122.\n 3            74             0.24        0.36     125 white       9         122.\n 4            69             0.36        0.34     127 white       9         122.\n 5            71             0.26        0.49     129 white       9         122.\n 6            62             0.66        0.48     128 white       8         103.\n 7            62             0.66        0.48     128 white       8         103.\n 8            68             0.26        0.42     105 white       8         103.\n 9            67             0.23        0.31     107 white       8         103.\n10            67             0.23        0.31     107 white       8         103.\n# ℹ 979 more rows\n# ℹ 1 more variable: alcohol_sd &lt;dbl&gt;"
  },
  {
    "objectID": "Homework3.html#task-3-database-practice",
    "href": "Homework3.html#task-3-database-practice",
    "title": "Homework3",
    "section": "Task 3: Database Practice",
    "text": "Task 3: Database Practice\nDownload the Lahman.db file associated with the Connecting to Databases notes/video.\n1. Connect to the database and then look at all of the tables in the database.\n\nlibrary(DBI)\n\nWarning: package 'DBI' was built under R version 4.2.3\n\ncon &lt;- dbConnect(RSQLite::SQLite(), \"lahman.db\")\ndbListTables(con)\n\n [1] \"AllstarFull\"         \"Appearances\"         \"AwardsManagers\"     \n [4] \"AwardsPlayers\"       \"AwardsShareManagers\" \"AwardsSharePlayers\" \n [7] \"Batting\"             \"BattingPost\"         \"CollegePlaying\"     \n[10] \"Fielding\"            \"FieldingOF\"          \"FieldingOFsplit\"    \n[13] \"FieldingPost\"        \"HallOfFame\"          \"HomeGames\"          \n[16] \"LahmanData\"          \"Managers\"            \"ManagersHalf\"       \n[19] \"Parks\"               \"People\"              \"Pitching\"           \n[22] \"PitchingPost\"        \"Salaries\"            \"Schools\"            \n[25] \"SeriesPost\"          \"Teams\"               \"TeamsFranchises\"    \n[28] \"TeamsHalf\"           \"battingLabels\"       \"fieldingLabels\"     \n[31] \"pitchingLabels\"     \n\n\n2. Use the tbl() function and dplyr to return all of the data from the Teams table for the year 2015.\n\ntbl(con, \"Teams\") |&gt;\n  filter(yearID == 2015) |&gt;\n  collect()\n\n# A tibble: 30 × 48\n   yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n    &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;\n 1   2015 NL    ARI    ARI      W         3   162    81    79    83 N      N    \n 2   2015 NL    ATL    ATL      E         4   162    81    67    95 N      N    \n 3   2015 AL    BAL    BAL      E         3   162    78    81    81 N      N    \n 4   2015 AL    BOS    BOS      E         5   162    81    78    84 N      N    \n 5   2015 AL    CHA    CHW      C         4   162    81    76    86 N      N    \n 6   2015 NL    CHN    CHC      C         3   162    81    97    65 N      Y    \n 7   2015 NL    CIN    CIN      C         5   162    81    64    98 N      N    \n 8   2015 AL    CLE    CLE      C         3   161    80    81    80 N      N    \n 9   2015 NL    COL    COL      W         5   162    81    68    94 N      N    \n10   2015 AL    DET    DET      C         5   161    81    74    87 N      N    \n# ℹ 20 more rows\n# ℹ 36 more variables: LgWin &lt;chr&gt;, WSWin &lt;chr&gt;, R &lt;int&gt;, AB &lt;int&gt;, H &lt;int&gt;,\n#   X2B &lt;int&gt;, X3B &lt;int&gt;, HR &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;,\n#   HBP &lt;int&gt;, SF &lt;int&gt;, RA &lt;int&gt;, ER &lt;int&gt;, ERA &lt;dbl&gt;, CG &lt;int&gt;, SHO &lt;int&gt;,\n#   SV &lt;int&gt;, IPouts &lt;int&gt;, HA &lt;int&gt;, HRA &lt;int&gt;, BBA &lt;int&gt;, SOA &lt;int&gt;, E &lt;int&gt;,\n#   DP &lt;int&gt;, FP &lt;dbl&gt;, name &lt;chr&gt;, park &lt;chr&gt;, attendance &lt;int&gt;, BPF &lt;int&gt;,\n#   PPF &lt;int&gt;, teamIDBR &lt;chr&gt;, teamIDlahman45 &lt;chr&gt;, teamIDretro &lt;chr&gt;\n\n\n3. Repeat the above by using the sql() function within tbl() (here you have to write actual SQL!).\n\ntbl(con, sql(\"SELECT `Teams`.*\n             FROM `Teams`\n             WHERE (`yearID` = 2015.0)\")) |&gt;\n  collect()\n\n# A tibble: 30 × 48\n   yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n    &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;\n 1   2015 NL    ARI    ARI      W         3   162    81    79    83 N      N    \n 2   2015 NL    ATL    ATL      E         4   162    81    67    95 N      N    \n 3   2015 AL    BAL    BAL      E         3   162    78    81    81 N      N    \n 4   2015 AL    BOS    BOS      E         5   162    81    78    84 N      N    \n 5   2015 AL    CHA    CHW      C         4   162    81    76    86 N      N    \n 6   2015 NL    CHN    CHC      C         3   162    81    97    65 N      Y    \n 7   2015 NL    CIN    CIN      C         5   162    81    64    98 N      N    \n 8   2015 AL    CLE    CLE      C         3   161    80    81    80 N      N    \n 9   2015 NL    COL    COL      W         5   162    81    68    94 N      N    \n10   2015 AL    DET    DET      C         5   161    81    74    87 N      N    \n# ℹ 20 more rows\n# ℹ 36 more variables: LgWin &lt;chr&gt;, WSWin &lt;chr&gt;, R &lt;int&gt;, AB &lt;int&gt;, H &lt;int&gt;,\n#   X2B &lt;int&gt;, X3B &lt;int&gt;, HR &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;,\n#   HBP &lt;int&gt;, SF &lt;int&gt;, RA &lt;int&gt;, ER &lt;int&gt;, ERA &lt;dbl&gt;, CG &lt;int&gt;, SHO &lt;int&gt;,\n#   SV &lt;int&gt;, IPouts &lt;int&gt;, HA &lt;int&gt;, HRA &lt;int&gt;, BBA &lt;int&gt;, SOA &lt;int&gt;, E &lt;int&gt;,\n#   DP &lt;int&gt;, FP &lt;dbl&gt;, name &lt;chr&gt;, park &lt;chr&gt;, attendance &lt;int&gt;, BPF &lt;int&gt;,\n#   PPF &lt;int&gt;, teamIDBR &lt;chr&gt;, teamIDlahman45 &lt;chr&gt;, teamIDretro &lt;chr&gt;\n\n\nEither use dplyr or write SQL queries for the rest of these questions!\n\n4. Return all of the players in the hall of fame, the year they were voted into the hall of fame, and their category (only those three variables!). See the HallOfFame table, the inducted variable is important here.\n\nplayer_data &lt;- tbl(con, \"HallOfFame\") |&gt;\n  filter(inducted == \"Y\") |&gt;\n  select(playerID, yearID, category) |&gt;\n  collect()\nplayer_data\n\n# A tibble: 340 × 3\n   playerID  yearID category         \n   &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;            \n 1 cobbty01    1936 Player           \n 2 ruthba01    1936 Player           \n 3 wagneho01   1936 Player           \n 4 mathech01   1936 Player           \n 5 johnswa01   1936 Player           \n 6 lajoina01   1937 Player           \n 7 speaktr01   1937 Player           \n 8 youngcy01   1937 Player           \n 9 bulkemo99   1937 Pioneer/Executive\n10 johnsba99   1937 Pioneer/Executive\n# ℹ 330 more rows\n\n\n5. Combine the table from the previous question with the People table in order to have the nameFirst and nameLast names added to what was returned above.\n\npeople_data &lt;- tbl(con, \"People\") |&gt;\n  select(playerID, nameFirst, nameLast) |&gt;\n  collect()\nplayer_data &lt;- left_join(player_data, people_data, by = \"playerID\")\nplayer_data\n\n# A tibble: 340 × 5\n   playerID  yearID category          nameFirst nameLast \n   &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;             &lt;chr&gt;     &lt;chr&gt;    \n 1 cobbty01    1936 Player            Ty        Cobb     \n 2 ruthba01    1936 Player            Babe      Ruth     \n 3 wagneho01   1936 Player            Honus     Wagner   \n 4 mathech01   1936 Player            Christy   Mathewson\n 5 johnswa01   1936 Player            Walter    Johnson  \n 6 lajoina01   1937 Player            Nap       Lajoie   \n 7 speaktr01   1937 Player            Tris      Speaker  \n 8 youngcy01   1937 Player            Cy        Young    \n 9 bulkemo99   1937 Pioneer/Executive Morgan    Bulkeley \n10 johnsba99   1937 Pioneer/Executive Ban       Johnson  \n# ℹ 330 more rows\n\n\n6. Return only the playerID (manager ID in this case), G, W, and L columns from the Managers table. Use chaining to then:\n- Determine the overall win/loss records (sum of wins and sum of losses) for each of these hall of fame managers.\n– We haven’t quite covered this so I’ll help out. We want to use group_by() with summarize() rather than mutate().\n- Create a new variable that is the career win/loss percentage (Total_W/G_managed). (Note: I did this after collect() otherwise the column type has to be set…)\n- Sort the resulting data by the win/loss percentage variable (from largest to smallest).\n\nmanager_data &lt;- tbl(con, \"Managers\") |&gt;\n  select(playerID, G, W, L) |&gt;\n  group_by(playerID) |&gt;\n  summarize(G_managed = sum(G, na.rm = TRUE),\n            Total_W = sum(W, na.rm = TRUE),\n            Total_L = sum(L, na.rm = TRUE)) |&gt;\n  collect() |&gt;\n  mutate(win_loss_percentage = Total_W / G_managed) |&gt;\n  arrange(desc(win_loss_percentage))\nmanager_data\n\n# A tibble: 749 × 5\n   playerID  G_managed Total_W Total_L win_loss_percentage\n   &lt;chr&gt;         &lt;int&gt;   &lt;int&gt;   &lt;int&gt;               &lt;dbl&gt;\n 1 bensove01         1       1       0                   1\n 2 burwebi01         1       1       0                   1\n 3 cohenan01         1       1       0                   1\n 4 ebeldi99          3       3       0                   1\n 5 falkbi01          1       1       0                   1\n 6 hardeme01         3       3       0                   1\n 7 simmote01         1       1       0                   1\n 8 steinte01         2       2       0                   1\n 9 sukefcl01         2       2       0                   1\n10 tamarjo01         1       1       0                   1\n# ℹ 739 more rows\n\ndbDisconnect(con)\n\n7. Use the results from the previous two questions to answer this one! Return information for only the people that managed a team and were inducted into the hall of fame (regardless of their category in the hall of fame - you want to return all people in the hall of fame that ever managed at all). (Just return all of the variables from both of the above two questions - 9 total columns)\n\ninner_join(player_data, manager_data, by = \"playerID\")\n\n# A tibble: 97 × 9\n   playerID  yearID category        nameFirst nameLast G_managed Total_W Total_L\n   &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;           &lt;chr&gt;     &lt;chr&gt;        &lt;int&gt;   &lt;int&gt;   &lt;int&gt;\n 1 cobbty01    1936 Player          Ty        Cobb           933     479     444\n 2 wagneho01   1936 Player          Honus     Wagner           5       1       4\n 3 mathech01   1936 Player          Christy   Mathews…       346     164     176\n 4 johnswa01   1936 Player          Walter    Johnson        966     529     432\n 5 lajoina01   1937 Player          Nap       Lajoie         700     377     309\n 6 speaktr01   1937 Player          Tris      Speaker       1139     617     520\n 7 youngcy01   1937 Player          Cy        Young            6       3       3\n 8 mackco01    1937 Manager         Connie    Mack          7755    3731    3948\n 9 mcgrajo01   1937 Manager         John      McGraw        4769    2763    1948\n10 wrighge01   1937 Pioneer/Execut… George    Wright          85      59      25\n# ℹ 87 more rows\n# ℹ 1 more variable: win_loss_percentage &lt;dbl&gt;"
  }
]